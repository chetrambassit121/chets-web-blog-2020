"""
Django settings for ablog project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os                                                                   # ADDED this line when we created media_root / media_url !! 
import dj_database_url
import django_heroku
from decouple import config 


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_numpy',
    'theblog',                                                         # ADDED ... after creating theblog app in git bash terminal add it to this file !!!!
    'members',                                                         # ADDED ... after creating the members app in git bash terminal add it to this file !!!!  
    'ckeditor',                                                        # ADDED ... after pip install django-ckeditor in gitbash we add it here !!!!  
    'ckeditor_uploader',               # added this since we downloaded ckeditor this is required for app to work              
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'whitenoise.middleware.WhiteNoiseMiddleware', # added ... to help serve static files during production follow this link https://medium.com/@naufal.ihsan21/how-to-serve-static-files-in-django-using-whitenoise-cda11f9bb643 

]

ROOT_URLCONF = 'ablog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ablog.wsgi.application'

# added for ckeditor and django ckeditor 5 
DJANGO_WYSIWYG_FLAVOR = "ckeditor"
CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'
CKEDITOR_RESTRICT_BY_USER = True #Only who upload image see it
CKEDITOR_UPLOAD_PATH = 'uploads/'
CKEDITOR_BROWSE_SHOW_DIRS = True # Shows directory of image in the server
CKEDITOR_RESTRICT_BY_DATE = True # Arranges image in terms of date uploaded
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': None,
        'extraPlugins': 'codesnippet',
    },
}


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

db_from_env = dj_database_url.config(conn_max_age=500)            # added ... required for the dj_databse_url module
DATABASES['default'].update(db_from_env)                          # added ... required for the dj_databse_url module
                                                                  # https://pypi.org/project/django-database-url/

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

MEDIA_URL = '/media/'                                # ADDED .. the variable media_url bound to the following directory media ... media will be auto created once first image is uploaded ! 
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')         # ADDED .. this is needed for the url path ... basically BASE_DIR is now joined with our media directory ... so urls can run thrrough the BASE_DIR 
                                                     # NOW .. after making this coding .. we will go to our ablog/urls.py file to add some coding there for media !! 

STATIC_URL = '/static/'
# STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)  # ADDED .. same concept as MEDIA ROOT except for the static directory !! this basically will set up our static files if we use them 
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]   # ADDED .. 
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')                                # added this root for the staticfiles .. during production all static files are collected and dumped into staticfiles folder
                                                                                   # using the command .. python manage.py collectstatic .. will take all static files and create then dump them into staticfiles folder 
                                                                                   # go to base directory (powerbuilding) access staticfiles folder 
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'    #


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# these two lines will redirect login/logout to the home page 
LOGIN_REDIRECT_URL = 'home'          # ADDED to redirect our login page  
LOGOUT_REDIRECT_URL = 'home'          # ADDED to redirect our logout page 

django_heroku.settings(locals())    # added ... required for django heroku 

